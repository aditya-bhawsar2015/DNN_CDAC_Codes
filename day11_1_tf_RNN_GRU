{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","mount_file_id":"1Jv64dZ0YIhPP5K1NTbptxf6E8JA2LNdg","authorship_tag":"ABX9TyPR/zfzv5PVcV1oRtKDrE49"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["In this file we will generate the text like shakesphere"],"metadata":{"id":"SiIwHR6spHxT"}},{"cell_type":"markdown","source":["### Tensorflow Implementation : GRU"],"metadata":{"id":"DlERk1MFpSQ8"}},{"cell_type":"code","execution_count":1,"metadata":{"id":"GElC27D-QgSm","executionInfo":{"status":"ok","timestamp":1747989379777,"user_tz":-330,"elapsed":5889,"user":{"displayName":"Pg-DAI","userId":"10432057515612960804"}}},"outputs":[],"source":["import os\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","import tensorflow as tf"]},{"cell_type":"code","source":["### -----------------\n","### Global parameters\n","### -----------------\n","RANDOM_STATE = 24\n","np.random.seed(RANDOM_STATE)           # Set random seed for reproducible results\n","tf.random.set_seed(RANDOM_STATE)\n","\n","TEST_SIZE = 0.2\n","ALPHA = 0.001\n","EPOCHS = 75\n","BATCH_SIZE = 64\n","\n","PATIENCE = 20          # for early stopping\n","LR_PATIENCE = 10\n","LR_FACTOR = 0.1       # by what factor we are reducing the lr\n","\n","# parameters for matplotlib\n","params = {'legend.fontsize': 'medium',\n","          'figure.figsize' : (15,6),\n","          'axes.labelsize': 'large',\n","          'axes.titlesize':'large',\n","          'xtick.labelsize':'medium',\n","          'ytick.labelsize':'medium'\n","          }\n","\n","CMAP = 'coolwarm' # plt.cm.Spectral\n","\n","plt.rcParams.update(params)"],"metadata":{"id":"Wld9-Vf7GT8m","executionInfo":{"status":"ok","timestamp":1747989379781,"user_tz":-330,"elapsed":2,"user":{"displayName":"Pg-DAI","userId":"10432057515612960804"}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":["### BASICS"],"metadata":{"id":"VUFdcyrH_tUS"}},{"cell_type":"code","source":["# # for, Physical device :\n","\n","# physical_device = tf.config.list_physical_devices('GPU')\n","# if len(physical_device) > 0:\n","#   tf.config.experimental.set_memory_growth(physical_device[0], True)          code this only when you are working on local machine and using GPU and you don't want tensorflow to occupy the whole GPU at once and give access to other fn to utilise GPU"],"metadata":{"id":"xed4z_xc_lCi","executionInfo":{"status":"ok","timestamp":1747989379784,"user_tz":-330,"elapsed":1,"user":{"displayName":"Pg-DAI","userId":"10432057515612960804"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["# Location of the directories :\n","\n","inpDir = os.path.join('..','..','input')\n","outDir = os.path.join('..','output')\n","subDir = 'ionosphere'\n","modelDir = os.path.join('..','models')"],"metadata":{"id":"XAcRKS_NATaq","executionInfo":{"status":"ok","timestamp":1747989379787,"user_tz":-330,"elapsed":1,"user":{"displayName":"Pg-DAI","userId":"10432057515612960804"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["# whenever we are working using inpDir and subDir on out machine, then\n","\n","# data_df = pd.read_csv(os.path.join(inpDir, subDir, 'ionosphere.data), header=None)\n","# data_df.head()"],"metadata":{"id":"oAnCxwhbApA5","executionInfo":{"status":"ok","timestamp":1747989379790,"user_tz":-330,"elapsed":1,"user":{"displayName":"Pg-DAI","userId":"10432057515612960804"}}},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":["### Import Statement : Load the data file. Here we don't use pandas instead we just diretly open our file."],"metadata":{"id":"HAokoTYvqHas"}},{"cell_type":"code","source":["dataFileName = '/content/drive/MyDrive/Colab Notebooks/Datasets/shakespeare.txt'\n","dataFileName"],"metadata":{"id":"nL3jIH3lHT-n","colab":{"base_uri":"https://localhost:8080/","height":36},"executionInfo":{"status":"ok","timestamp":1747989379819,"user_tz":-330,"elapsed":28,"user":{"displayName":"Pg-DAI","userId":"10432057515612960804"}},"outputId":"d922e0ac-ce6a-4f0c-b467-dd48c46310be"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'/content/drive/MyDrive/Colab Notebooks/Datasets/shakespeare.txt'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["text = open(dataFileName, 'rb').read().decode(encoding='utf-8')\n","len(text)"],"metadata":{"id":"eYwnxSXWHaWE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1747989381307,"user_tz":-330,"elapsed":1486,"user":{"displayName":"Pg-DAI","userId":"10432057515612960804"}},"outputId":"69aaa426-f4e5-4f72-9c88-85b1c54eaf0f"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1115395"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["print(text[:1000])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WcNlYTTSrgZx","executionInfo":{"status":"ok","timestamp":1747989381315,"user_tz":-330,"elapsed":11,"user":{"displayName":"Pg-DAI","userId":"10432057515612960804"}},"outputId":"6131a365-a275-44e4-ae9a-a80d3ab5ce86"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["First Citizen:\n","Before we proceed any further, hear me speak.\n","\n","All:\n","Speak, speak.\n","\n","First Citizen:\n","You are all resolved rather to die than to famish?\n","\n","All:\n","Resolved. resolved.\n","\n","First Citizen:\n","First, you know Caius Marcius is chief enemy to the people.\n","\n","All:\n","We know't, we know't.\n","\n","First Citizen:\n","Let us kill him, and we'll have corn at our own price.\n","Is't a verdict?\n","\n","All:\n","No more talking on't; let it be done: away, away!\n","\n","Second Citizen:\n","One word, good citizens.\n","\n","First Citizen:\n","We are accounted poor citizens, the patricians good.\n","What authority surfeits on would relieve us: if they\n","would yield us but the superfluity, while it were\n","wholesome, we might guess they relieved us humanely;\n","but they think we are too dear: the leanness that\n","afflicts us, the object of our misery, is as an\n","inventory to particularise their abundance; our\n","sufferance is a gain to them Let us revenge this with\n","our pikes, ere we become rakes: for the gods know I\n","speak this in hunger for bread, not in thirst for revenge.\n","\n","\n"]}]},{"cell_type":"code","source":["vocab = sorted(set(text))\n","len(vocab)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wO0ZcoTxrgXJ","executionInfo":{"status":"ok","timestamp":1747989381341,"user_tz":-330,"elapsed":24,"user":{"displayName":"Pg-DAI","userId":"10432057515612960804"}},"outputId":"b385d10b-e84b-4cb2-9c8c-d37cebbeb0df"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["65"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["chr2idx = {u:i for i, u in enumerate(vocab)}\n","chr2idx"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9O__ZolbrgUk","executionInfo":{"status":"ok","timestamp":1747989381377,"user_tz":-330,"elapsed":35,"user":{"displayName":"Pg-DAI","userId":"10432057515612960804"}},"outputId":"f60326a7-fa7f-4873-9e67-3c58ffe8f226"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'\\n': 0,\n"," ' ': 1,\n"," '!': 2,\n"," '$': 3,\n"," '&': 4,\n"," \"'\": 5,\n"," ',': 6,\n"," '-': 7,\n"," '.': 8,\n"," '3': 9,\n"," ':': 10,\n"," ';': 11,\n"," '?': 12,\n"," 'A': 13,\n"," 'B': 14,\n"," 'C': 15,\n"," 'D': 16,\n"," 'E': 17,\n"," 'F': 18,\n"," 'G': 19,\n"," 'H': 20,\n"," 'I': 21,\n"," 'J': 22,\n"," 'K': 23,\n"," 'L': 24,\n"," 'M': 25,\n"," 'N': 26,\n"," 'O': 27,\n"," 'P': 28,\n"," 'Q': 29,\n"," 'R': 30,\n"," 'S': 31,\n"," 'T': 32,\n"," 'U': 33,\n"," 'V': 34,\n"," 'W': 35,\n"," 'X': 36,\n"," 'Y': 37,\n"," 'Z': 38,\n"," 'a': 39,\n"," 'b': 40,\n"," 'c': 41,\n"," 'd': 42,\n"," 'e': 43,\n"," 'f': 44,\n"," 'g': 45,\n"," 'h': 46,\n"," 'i': 47,\n"," 'j': 48,\n"," 'k': 49,\n"," 'l': 50,\n"," 'm': 51,\n"," 'n': 52,\n"," 'o': 53,\n"," 'p': 54,\n"," 'q': 55,\n"," 'r': 56,\n"," 's': 57,\n"," 't': 58,\n"," 'u': 59,\n"," 'v': 60,\n"," 'w': 61,\n"," 'x': 62,\n"," 'y': 63,\n"," 'z': 64}"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["idx2chr = np.array(vocab)\n","text_as_int = np.array([chr2idx[c] for c in text])\n","text_as_int.shape                   # here it has became an array for us"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TD1WUUusrgSB","executionInfo":{"status":"ok","timestamp":1747989381564,"user_tz":-330,"elapsed":186,"user":{"displayName":"Pg-DAI","userId":"10432057515612960804"}},"outputId":"78853804-9d37-422d-aad2-4ae37db3f43f"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1115395,)"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["text_as_int                           # it is an array of integers put togetger"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oaVtWBdTsb9-","executionInfo":{"status":"ok","timestamp":1747989381626,"user_tz":-330,"elapsed":22,"user":{"displayName":"Pg-DAI","userId":"10432057515612960804"}},"outputId":"a05dc248-399e-4392-a845-5ff7432705ae"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([18, 47, 56, ...,  8,  0,  0])"]},"metadata":{},"execution_count":12}]},{"cell_type":"markdown","source":["It is a running text so we need to create labels for it and accordingly make the text codings."],"metadata":{"id":"R41i9rn4tC0U"}},{"cell_type":"code","source":["seq_length = 100\n","\n","example_per_epoch = len(text) // (seq_length+1)\n","\n","char_dataset = tf.data.Dataset.from_tensor_slices(text_as_int)                                           # whenever we want to create a numpy to character dataset\n","\n","for i in char_dataset.take(18):                                                                     # whenever we use \"take\" it converts the alphabet to its respective numerical value\n","  print(i.numpy() , '|' , idx2chr[i.numpy()])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yD4_JMY8sb7Z","executionInfo":{"status":"ok","timestamp":1747989383084,"user_tz":-330,"elapsed":1460,"user":{"displayName":"Pg-DAI","userId":"10432057515612960804"}},"outputId":"d0087832-a913-44dc-9c79-e96423f572cd"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["18 | F\n","47 | i\n","56 | r\n","57 | s\n","58 | t\n","1 |  \n","15 | C\n","47 | i\n","58 | t\n","47 | i\n","64 | z\n","43 | e\n","52 | n\n","10 | :\n","0 | \n","\n","14 | B\n","43 | e\n","44 | f\n"]}]},{"cell_type":"code","source":["sequences = char_dataset.batch(seq_length + 1, drop_remainder=True)\n","\n","for item in sequences.take(2):                     # we get tensors here each of length 100\n","  print(item)\n","  print(repr(''.join(idx2chr[item.numpy()])))    # the text version of the sequences we are generating using print(item)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BESQUf3ls8KM","executionInfo":{"status":"ok","timestamp":1747989383160,"user_tz":-330,"elapsed":81,"user":{"displayName":"Pg-DAI","userId":"10432057515612960804"}},"outputId":"5468dfc4-c1be-4a15-c9b3-7c69a7890929"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["tf.Tensor(\n","[18 47 56 57 58  1 15 47 58 47 64 43 52 10  0 14 43 44 53 56 43  1 61 43\n","  1 54 56 53 41 43 43 42  1 39 52 63  1 44 59 56 58 46 43 56  6  1 46 43\n"," 39 56  1 51 43  1 57 54 43 39 49  8  0  0 13 50 50 10  0 31 54 43 39 49\n","  6  1 57 54 43 39 49  8  0  0 18 47 56 57 58  1 15 47 58 47 64 43 52 10\n","  0 37 53 59  1], shape=(101,), dtype=int64)\n","'First Citizen:\\nBefore we proceed any further, hear me speak.\\n\\nAll:\\nSpeak, speak.\\n\\nFirst Citizen:\\nYou '\n","tf.Tensor(\n","[39 56 43  1 39 50 50  1 56 43 57 53 50 60 43 42  1 56 39 58 46 43 56  1\n"," 58 53  1 42 47 43  1 58 46 39 52  1 58 53  1 44 39 51 47 57 46 12  0  0\n"," 13 50 50 10  0 30 43 57 53 50 60 43 42  8  1 56 43 57 53 50 60 43 42  8\n","  0  0 18 47 56 57 58  1 15 47 58 47 64 43 52 10  0 18 47 56 57 58  6  1\n"," 63 53 59  1 49], shape=(101,), dtype=int64)\n","'are all resolved rather to die than to famish?\\n\\nAll:\\nResolved. resolved.\\n\\nFirst Citizen:\\nFirst, you k'\n"]}]},{"cell_type":"code","source":["# now here we want to define our data so creating a function :\n","def split_input_target(chunk):\n","  input_text = chunk[:-1]\n","  target_text = chunk[1:]\n","  return input_text, target_text\n","\n","dataset = sequences.map(split_input_target)"],"metadata":{"id":"Xkt4fB4usb4f","executionInfo":{"status":"ok","timestamp":1747989383355,"user_tz":-330,"elapsed":192,"user":{"displayName":"Pg-DAI","userId":"10432057515612960804"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["for inp_ex, tar_ex in dataset.take(2):\n","  print(repr(''.join(idx2chr[inp_ex.numpy()])))\n","  print(repr(''.join(idx2chr[tar_ex.numpy()])))\n","  print('-'*100)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A7DA7BHMw_S9","executionInfo":{"status":"ok","timestamp":1747989383525,"user_tz":-330,"elapsed":166,"user":{"displayName":"Pg-DAI","userId":"10432057515612960804"}},"outputId":"d69cde98-4ee0-4082-beb6-07114482b599"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["'First Citizen:\\nBefore we proceed any further, hear me speak.\\n\\nAll:\\nSpeak, speak.\\n\\nFirst Citizen:\\nYou'\n","'irst Citizen:\\nBefore we proceed any further, hear me speak.\\n\\nAll:\\nSpeak, speak.\\n\\nFirst Citizen:\\nYou '\n","----------------------------------------------------------------------------------------------------\n","'are all resolved rather to die than to famish?\\n\\nAll:\\nResolved. resolved.\\n\\nFirst Citizen:\\nFirst, you '\n","'re all resolved rather to die than to famish?\\n\\nAll:\\nResolved. resolved.\\n\\nFirst Citizen:\\nFirst, you k'\n","----------------------------------------------------------------------------------------------------\n"]}]},{"cell_type":"code","source":["BUFFER_SIZE = 10000\n","dataset = dataset.shuffle(BUFFER_SIZE).batch(batch_size = BATCH_SIZE,drop_remainder=True)\n","\n","dataset                   # this doesn't gives output but shows the batch size instead"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"knDG1Yydw_Qi","executionInfo":{"status":"ok","timestamp":1747989387461,"user_tz":-330,"elapsed":3938,"user":{"displayName":"Pg-DAI","userId":"10432057515612960804"}},"outputId":"ff997966-0225-4453-a717-5de32bfeff83"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<_BatchDataset element_spec=(TensorSpec(shape=(64, 100), dtype=tf.int64, name=None), TensorSpec(shape=(64, 100), dtype=tf.int64, name=None))>"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["vocab_size = len(vocab)\n","embedding_dim = 256\n","rnn_units = 1024"],"metadata":{"id":"0qSIp68Vw_N8","executionInfo":{"status":"ok","timestamp":1747989387471,"user_tz":-330,"elapsed":5,"user":{"displayName":"Pg-DAI","userId":"10432057515612960804"}}},"execution_count":18,"outputs":[]},{"cell_type":"markdown","source":["### MODEL"],"metadata":{"id":"4xkBk3KZalpH"}},{"cell_type":"markdown","source":["This model takes the input as a list."],"metadata":{"id":"omJK8Ybmavqe"}},{"cell_type":"code","source":["def build_model(vocab_size, embedding_dim, rnn_units, batch_size = BATCH_SIZE):\n","  initializer = tf.keras.initializers.GlorotUniform(seed=RANDOM_STATE)\n","  activation = 'tanh'\n","\n","  return tf.keras.Sequential([\n","    tf.keras.Input(shape=(None,), batch_size=batch_size),\n","    tf.keras.layers.Embedding(vocab_size, embedding_dim),\n","\n","    tf.keras.layers.GRU(units = rnn_units,\n","                        activation=activation,\n","                        kernel_initializer=initializer,\n","                        recurrent_initializer = initializer,\n","                        seed = RANDOM_STATE,\n","                        return_sequences = True,\n","                        stateful=True),\n","    tf.keras.layers.Dense(vocab_size,\n","                          kernel_initializer = initializer)  # Output Layer\n","])\n","\n","model = build_model(vocab_size, embedding_dim, rnn_units)\n","\n","optimizer = tf.keras.optimizers.Adam(learning_rate=ALPHA)\n","\n","model.compile(loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n","              optimizer = optimizer,\n","              metrics= ['accuracy'])\n","\n","model.summary()"],"metadata":{"id":"8L1WkCcxglgh","executionInfo":{"status":"ok","timestamp":1747989389403,"user_tz":-330,"elapsed":1880,"user":{"displayName":"Pg-DAI","userId":"10432057515612960804"}},"colab":{"base_uri":"https://localhost:8080/","height":230},"outputId":"6c019997-a326-43c3-c6a2-ad0df704326e"},"execution_count":19,"outputs":[{"output_type":"display_data","data":{"text/plain":["\u001b[1mModel: \"sequential\"\u001b[0m\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n","┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n","│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m64\u001b[0m, \u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)        │        \u001b[38;5;34m16,640\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ gru (\u001b[38;5;33mGRU\u001b[0m)                       │ (\u001b[38;5;34m64\u001b[0m, \u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1024\u001b[0m)       │     \u001b[38;5;34m3,938,304\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;34m64\u001b[0m, \u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m65\u001b[0m)         │        \u001b[38;5;34m66,625\u001b[0m │\n","└─────────────────────────────────┴────────────────────────┴───────────────┘\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n","┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n","│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)        │        <span style=\"color: #00af00; text-decoration-color: #00af00\">16,640</span> │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ gru (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GRU</span>)                       │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>)       │     <span style=\"color: #00af00; text-decoration-color: #00af00\">3,938,304</span> │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">65</span>)         │        <span style=\"color: #00af00; text-decoration-color: #00af00\">66,625</span> │\n","└─────────────────────────────────┴────────────────────────┴───────────────┘\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Total params: \u001b[0m\u001b[38;5;34m4,021,569\u001b[0m (15.34 MB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">4,021,569</span> (15.34 MB)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m4,021,569\u001b[0m (15.34 MB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">4,021,569</span> (15.34 MB)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n","</pre>\n"]},"metadata":{}}]},{"cell_type":"code","source":["for inp_ex_batch, tar_ex_batch in dataset.take(1):\n","  ex_pred = model(inp_ex_batch)\n","ex_pred.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qysoLuAigld4","executionInfo":{"status":"ok","timestamp":1747989394500,"user_tz":-330,"elapsed":5095,"user":{"displayName":"Pg-DAI","userId":"10432057515612960804"}},"outputId":"fe52e62c-4384-4427-c03d-09745f3baa72"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["TensorShape([64, 100, 65])"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["# Here we gt 65 probabilities so we want sample from here\n","sampled_indices = tf.random.categorical(ex_pred[0], num_samples=1)\n","print(sampled_indices.shape)\n","\n","sampled_indices = tf.squeeze(sampled_indices, axis=-1).numpy()\n","display(sampled_indices.shape)\n","\n","print(repr(''.join(idx2chr[sampled_indices])))\n","# We get any set of characters as output bcoz we still need to train model and here we don't have test data so we will save all the models and choose the best one from them."],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":72},"id":"SNp24v-_zcHs","executionInfo":{"status":"ok","timestamp":1747989394557,"user_tz":-330,"elapsed":54,"user":{"displayName":"Pg-DAI","userId":"10432057515612960804"}},"outputId":"79092c81-a9fd-47d8-9c72-4338e91414bd"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["(100, 1)\n"]},{"output_type":"display_data","data":{"text/plain":["(100,)"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\"XQQoXBTk.NTrdPdUBGQIWPErKE'aDvBl YZGQfJ?uPeSLsFvfNZ$KXw,Olj.Kx'vJVFdpIzQB:D;zKwi :'wmPYpa3OKIbYUjDVw\"\n"]}]},{"cell_type":"code","source":["chkPointPath = os.path.join(modelDir, subDir)\n","chkPointPrefix = os.path.join(chkPointPath, 'chkpt_{epoch}.keras')\n","chkpts_callback = tf.keras.callbacks.ModelCheckpoint(filepath=chkPointPrefix)"],"metadata":{"id":"eCPD-Sx0zcEv","executionInfo":{"status":"ok","timestamp":1747989394557,"user_tz":-330,"elapsed":5,"user":{"displayName":"Pg-DAI","userId":"10432057515612960804"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["history = model.fit(dataset,\n","                    epochs=EPOCHS,\n","                    callbacks=[chkpts_callback],\n","                    verbose=2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uVDVLX1xzcBc","executionInfo":{"status":"ok","timestamp":1747990496631,"user_tz":-330,"elapsed":1102076,"user":{"displayName":"Pg-DAI","userId":"10432057515612960804"}},"outputId":"179b19f1-a56c-4cc6-e46b-054e9952c89e"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/75\n","172/172 - 14s - 80ms/step - accuracy: 0.3168 - loss: 2.5168\n","Epoch 2/75\n","172/172 - 11s - 65ms/step - accuracy: 0.4551 - loss: 1.8560\n","Epoch 3/75\n","172/172 - 12s - 72ms/step - accuracy: 0.5189 - loss: 1.6227\n","Epoch 4/75\n","172/172 - 12s - 70ms/step - accuracy: 0.5503 - loss: 1.4999\n","Epoch 5/75\n","172/172 - 20s - 115ms/step - accuracy: 0.5684 - loss: 1.4271\n","Epoch 6/75\n","172/172 - 12s - 70ms/step - accuracy: 0.5812 - loss: 1.3751\n","Epoch 7/75\n","172/172 - 13s - 74ms/step - accuracy: 0.5918 - loss: 1.3336\n","Epoch 8/75\n","172/172 - 13s - 75ms/step - accuracy: 0.6012 - loss: 1.2986\n","Epoch 9/75\n","172/172 - 13s - 77ms/step - accuracy: 0.6093 - loss: 1.2675\n","Epoch 10/75\n","172/172 - 12s - 72ms/step - accuracy: 0.6170 - loss: 1.2373\n","Epoch 11/75\n","172/172 - 20s - 115ms/step - accuracy: 0.6254 - loss: 1.2071\n","Epoch 12/75\n","172/172 - 14s - 82ms/step - accuracy: 0.6343 - loss: 1.1775\n","Epoch 13/75\n","172/172 - 19s - 110ms/step - accuracy: 0.6430 - loss: 1.1477\n","Epoch 14/75\n","172/172 - 13s - 74ms/step - accuracy: 0.6511 - loss: 1.1193\n","Epoch 15/75\n","172/172 - 13s - 74ms/step - accuracy: 0.6613 - loss: 1.0882\n","Epoch 16/75\n","172/172 - 19s - 112ms/step - accuracy: 0.6714 - loss: 1.0566\n","Epoch 17/75\n","172/172 - 12s - 68ms/step - accuracy: 0.6811 - loss: 1.0256\n","Epoch 18/75\n","172/172 - 12s - 68ms/step - accuracy: 0.6926 - loss: 0.9926\n","Epoch 19/75\n","172/172 - 12s - 68ms/step - accuracy: 0.7029 - loss: 0.9629\n","Epoch 20/75\n","172/172 - 12s - 70ms/step - accuracy: 0.7136 - loss: 0.9318\n","Epoch 21/75\n","172/172 - 15s - 85ms/step - accuracy: 0.7247 - loss: 0.9023\n","Epoch 22/75\n","172/172 - 14s - 83ms/step - accuracy: 0.7346 - loss: 0.8733\n","Epoch 23/75\n","172/172 - 12s - 71ms/step - accuracy: 0.7443 - loss: 0.8458\n","Epoch 24/75\n","172/172 - 13s - 77ms/step - accuracy: 0.7530 - loss: 0.8233\n","Epoch 25/75\n","172/172 - 19s - 109ms/step - accuracy: 0.7614 - loss: 0.7995\n","Epoch 26/75\n","172/172 - 12s - 69ms/step - accuracy: 0.7684 - loss: 0.7802\n","Epoch 27/75\n","172/172 - 22s - 130ms/step - accuracy: 0.7755 - loss: 0.7614\n","Epoch 28/75\n","172/172 - 13s - 75ms/step - accuracy: 0.7812 - loss: 0.7455\n","Epoch 29/75\n","172/172 - 14s - 83ms/step - accuracy: 0.7863 - loss: 0.7309\n","Epoch 30/75\n","172/172 - 14s - 80ms/step - accuracy: 0.7904 - loss: 0.7191\n","Epoch 31/75\n","172/172 - 14s - 80ms/step - accuracy: 0.7948 - loss: 0.7075\n","Epoch 32/75\n","172/172 - 13s - 73ms/step - accuracy: 0.7974 - loss: 0.6997\n","Epoch 33/75\n","172/172 - 20s - 119ms/step - accuracy: 0.8010 - loss: 0.6901\n","Epoch 34/75\n","172/172 - 20s - 116ms/step - accuracy: 0.8022 - loss: 0.6850\n","Epoch 35/75\n","172/172 - 20s - 118ms/step - accuracy: 0.8058 - loss: 0.6771\n","Epoch 36/75\n","172/172 - 21s - 122ms/step - accuracy: 0.8071 - loss: 0.6720\n","Epoch 37/75\n","172/172 - 12s - 68ms/step - accuracy: 0.8085 - loss: 0.6683\n","Epoch 38/75\n","172/172 - 12s - 68ms/step - accuracy: 0.8098 - loss: 0.6638\n","Epoch 39/75\n","172/172 - 12s - 68ms/step - accuracy: 0.8112 - loss: 0.6597\n","Epoch 40/75\n","172/172 - 12s - 71ms/step - accuracy: 0.8119 - loss: 0.6580\n","Epoch 41/75\n","172/172 - 13s - 73ms/step - accuracy: 0.8127 - loss: 0.6554\n","Epoch 42/75\n","172/172 - 13s - 74ms/step - accuracy: 0.8117 - loss: 0.6570\n","Epoch 43/75\n","172/172 - 12s - 72ms/step - accuracy: 0.8120 - loss: 0.6565\n","Epoch 44/75\n","172/172 - 12s - 69ms/step - accuracy: 0.8124 - loss: 0.6543\n","Epoch 45/75\n","172/172 - 20s - 117ms/step - accuracy: 0.8113 - loss: 0.6576\n","Epoch 46/75\n","172/172 - 12s - 68ms/step - accuracy: 0.8115 - loss: 0.6555\n","Epoch 47/75\n","172/172 - 13s - 75ms/step - accuracy: 0.8116 - loss: 0.6557\n","Epoch 48/75\n","172/172 - 12s - 68ms/step - accuracy: 0.8113 - loss: 0.6552\n","Epoch 49/75\n","172/172 - 21s - 123ms/step - accuracy: 0.8113 - loss: 0.6556\n","Epoch 50/75\n","172/172 - 12s - 68ms/step - accuracy: 0.8098 - loss: 0.6593\n","Epoch 51/75\n","172/172 - 20s - 119ms/step - accuracy: 0.8082 - loss: 0.6635\n","Epoch 52/75\n","172/172 - 12s - 69ms/step - accuracy: 0.8073 - loss: 0.6640\n","Epoch 53/75\n","172/172 - 12s - 72ms/step - accuracy: 0.8072 - loss: 0.6655\n","Epoch 54/75\n","172/172 - 12s - 69ms/step - accuracy: 0.8049 - loss: 0.6713\n","Epoch 55/75\n","172/172 - 20s - 119ms/step - accuracy: 0.8041 - loss: 0.6727\n","Epoch 56/75\n","172/172 - 12s - 72ms/step - accuracy: 0.8029 - loss: 0.6750\n","Epoch 57/75\n","172/172 - 12s - 71ms/step - accuracy: 0.8004 - loss: 0.6810\n","Epoch 58/75\n","172/172 - 12s - 69ms/step - accuracy: 0.7998 - loss: 0.6836\n","Epoch 59/75\n","172/172 - 21s - 120ms/step - accuracy: 0.7962 - loss: 0.6906\n","Epoch 60/75\n","172/172 - 12s - 71ms/step - accuracy: 0.7942 - loss: 0.6970\n","Epoch 61/75\n","172/172 - 20s - 116ms/step - accuracy: 0.7917 - loss: 0.7040\n","Epoch 62/75\n","172/172 - 12s - 69ms/step - accuracy: 0.7895 - loss: 0.7080\n","Epoch 63/75\n","172/172 - 23s - 131ms/step - accuracy: 0.7876 - loss: 0.7137\n","Epoch 64/75\n","172/172 - 12s - 70ms/step - accuracy: 0.7843 - loss: 0.7222\n","Epoch 65/75\n","172/172 - 12s - 71ms/step - accuracy: 0.7825 - loss: 0.7274\n","Epoch 66/75\n","172/172 - 20s - 115ms/step - accuracy: 0.7796 - loss: 0.7342\n","Epoch 67/75\n","172/172 - 21s - 120ms/step - accuracy: 0.7771 - loss: 0.7404\n","Epoch 68/75\n","172/172 - 22s - 130ms/step - accuracy: 0.7720 - loss: 0.7540\n","Epoch 69/75\n","172/172 - 13s - 75ms/step - accuracy: 0.7688 - loss: 0.7617\n","Epoch 70/75\n","172/172 - 13s - 73ms/step - accuracy: 0.7645 - loss: 0.7731\n","Epoch 71/75\n","172/172 - 12s - 70ms/step - accuracy: 0.7603 - loss: 0.7854\n","Epoch 72/75\n","172/172 - 12s - 67ms/step - accuracy: 0.7574 - loss: 0.7930\n","Epoch 73/75\n","172/172 - 12s - 68ms/step - accuracy: 0.7525 - loss: 0.8068\n","Epoch 74/75\n","172/172 - 13s - 74ms/step - accuracy: 0.7508 - loss: 0.8104\n","Epoch 75/75\n","172/172 - 21s - 122ms/step - accuracy: 0.7456 - loss: 0.8255\n"]}]},{"cell_type":"code","source":["loss_df = pd.DataFrame(history.history)\n","loss_df = loss_df.rename({'root_mean_squared_error' : 'rmse', 'val_root_mean_squared_error': 'val_rmse'}, axis=1)\n","loss_df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"YOaSfar_UUIQ","executionInfo":{"status":"ok","timestamp":1747990520224,"user_tz":-330,"elapsed":34,"user":{"displayName":"Pg-DAI","userId":"10432057515612960804"}},"outputId":"5b54450c-b4c6-4148-8494-d27775f71a4c"},"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   accuracy      loss\n","0  0.316765  2.516820\n","1  0.455119  1.855970\n","2  0.518913  1.622734\n","3  0.550255  1.499874\n","4  0.568445  1.427089"],"text/html":["\n","  <div id=\"df-70466f5f-dfd4-4272-a942-c318892f26c5\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>accuracy</th>\n","      <th>loss</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.316765</td>\n","      <td>2.516820</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.455119</td>\n","      <td>1.855970</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.518913</td>\n","      <td>1.622734</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.550255</td>\n","      <td>1.499874</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.568445</td>\n","      <td>1.427089</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-70466f5f-dfd4-4272-a942-c318892f26c5')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-70466f5f-dfd4-4272-a942-c318892f26c5 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-70466f5f-dfd4-4272-a942-c318892f26c5');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-0846f0a8-7f14-43bb-90e1-f907ff0cb8dc\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0846f0a8-7f14-43bb-90e1-f907ff0cb8dc')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-0846f0a8-7f14-43bb-90e1-f907ff0cb8dc button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"loss_df","summary":"{\n  \"name\": \"loss_df\",\n  \"rows\": 75,\n  \"fields\": [\n    {\n      \"column\": \"accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09680610120386196,\n        \"min\": 0.31676506996154785,\n        \"max\": 0.8127036094665527,\n        \"num_unique_values\": 75,\n        \"samples\": [\n          0.5684449672698975,\n          0.7842876315116882,\n          0.6254433989524841\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"loss\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.32647601802832044,\n        \"min\": 0.6542721390724182,\n        \"max\": 2.516820192337036,\n        \"num_unique_values\": 75,\n        \"samples\": [\n          1.427088975906372,\n          0.7221993207931519,\n          1.2071001529693604\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["model_num"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eHgESBYPfjNh","executionInfo":{"status":"ok","timestamp":1747992895012,"user_tz":-330,"elapsed":35,"user":{"displayName":"Pg-DAI","userId":"10432057515612960804"}},"outputId":"4b0d60a4-3818-4095-c167-757fb51ff4a9"},"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/plain":["np.int64(43)"]},"metadata":{},"execution_count":39}]},{"cell_type":"code","source":["model_num = loss_df.loc[loss_df['loss'] == loss_df['loss'].min()].index.to_numpy()[0]\n","model_path = os.path.join(chkPointPath, f'chkpt_{model_num}.keras')\n","\n","model1 = build_model(vocab_size = vocab_size, embedding_dim = embedding_dim,\n","                     rnn_units = rnn_units,\n","                     batch_size=1)\n","\n","model1.load_weights(model_path)\n","\n","model1.build(tf.TensorShape([1, None]))\n","model1.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":230},"id":"RhmC8rwuS8aw","executionInfo":{"status":"ok","timestamp":1747990522401,"user_tz":-330,"elapsed":304,"user":{"displayName":"Pg-DAI","userId":"10432057515612960804"}},"outputId":"494c3046-a4aa-46f0-8f78-328cf58911e2"},"execution_count":29,"outputs":[{"output_type":"display_data","data":{"text/plain":["\u001b[1mModel: \"sequential_1\"\u001b[0m\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_1\"</span>\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n","┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n","│ embedding_1 (\u001b[38;5;33mEmbedding\u001b[0m)         │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)         │        \u001b[38;5;34m16,640\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ gru_1 (\u001b[38;5;33mGRU\u001b[0m)                     │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1024\u001b[0m)        │     \u001b[38;5;34m3,938,304\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m1\u001b[0m, \u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m65\u001b[0m)          │        \u001b[38;5;34m66,625\u001b[0m │\n","└─────────────────────────────────┴────────────────────────┴───────────────┘\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n","┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n","│ embedding_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)         │        <span style=\"color: #00af00; text-decoration-color: #00af00\">16,640</span> │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ gru_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GRU</span>)                     │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1024</span>)        │     <span style=\"color: #00af00; text-decoration-color: #00af00\">3,938,304</span> │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">65</span>)          │        <span style=\"color: #00af00; text-decoration-color: #00af00\">66,625</span> │\n","└─────────────────────────────────┴────────────────────────┴───────────────┘\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Total params: \u001b[0m\u001b[38;5;34m4,021,569\u001b[0m (15.34 MB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">4,021,569</span> (15.34 MB)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m4,021,569\u001b[0m (15.34 MB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">4,021,569</span> (15.34 MB)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n","</pre>\n"]},"metadata":{}}]},{"cell_type":"code","source":["start_string = u'ROMEO:'\n","\n","num_generate = 1000\n","input_eval = [chr2idx[s] for s in start_string]\n","input_eval = tf.expand_dims(input_eval, 0)\n","text_generated = []\n","\n","for i in range(num_generate):\n","  predictions = model1(input_eval)\n","  predictions = tf.squeeze(predictions, 0)\n","  pred_td = tf.random.categorical(predictions, num_samples=1)[-1,0].numpy()\n","  input_eval = tf.expand_dims([pred_td], 0)\n","  text_generated.append(idx2chr[pred_td])\n","\n","print (start_string+ ''.join(text_generated))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I16Redr7S8Yh","executionInfo":{"status":"ok","timestamp":1747991065735,"user_tz":-330,"elapsed":12589,"user":{"displayName":"Pg-DAI","userId":"10432057515612960804"}},"outputId":"564f586c-ed9b-4385-ab75-626069433795"},"execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":["ROMEO:\n","Sweetly, my lord, before the duke must help.\n","\n","KING RICHARD II:\n","Right, you will not be youngest, bug bastards lingers.\n","\n","JULIET:\n","I saw him in; another, in the wars;\n","Which were pass me, and be loved,\n","She shall be dead mistorake.\n","\n","DER:\n","Ratclind, nor honesty but the more of our ausemy; he's a race of\n","hearing with a block, hear some gates\n","Shall quickly trudge abois the first to die by the hazet me me to:\n","And welcome, Pompey; boor worms in pain.\n","He that fooling thus my bones, they\n","still-pace better than purpose;\n","While you are come, that his bed shall be up more\n","thanks in storm; who, though Forwithstarly were her.\n","\n","PETRUCHIO:\n","O pleasure well, holy father! Emilia,\n","I would\n","I whit for't: but for a while beginst\n","O not provoked him to pie; in small a vessel\n","Which on the disposition will these reputers?\n","\n","DORSET:\n","No more afford as much beyond mixtook for an assisted earthly\n","I will enforcet them till flatter away\n","The dukedom all:\n","Hold, take my face of boatswain?\n","\n","Boatswain:\n","Do you go along.\n","\n","First Ci\n"]}]},{"cell_type":"code","source":[],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PWVEd5WXS8V5","executionInfo":{"status":"ok","timestamp":1747990583781,"user_tz":-330,"elapsed":20,"user":{"displayName":"Pg-DAI","userId":"10432057515612960804"}},"outputId":"baaa3f6b-d077-42e4-9484-65d3d01271f0"},"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["np.int64(0)"]},"metadata":{},"execution_count":33}]},{"cell_type":"code","source":[],"metadata":{"id":"vb1I2l-dS8TP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"02ByoIVvS8Q4"},"execution_count":null,"outputs":[]}]}